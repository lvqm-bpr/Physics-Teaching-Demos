import matplotlib.pyplot as plt
import numpy as np
#genlaguerre is used specially for radia wavefunction.
from scipy.special import genlaguerre
#tkinter is used mainly for widgets like buttons, labels, dropdown
#stringvar used to store string values
#optionmenu used for dropdown
from tkinter import Tk, Label, IntVar, OptionMenu
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
from matplotlib.figure import Figure
#bohr radius , a physical constant
a_0 = 1
#r=radial distance, n=principal quantum number and l is azimuthal quantum number
def radial_wavefunction(r, n, l):
    rho = 2 * r / (n * a_0)
    norm = np.sqrt((2 / (n * a_0))**3 * np.math.factorial(n - l - 1) / (2 * n * np.math.factorial(n + l)))
    laguerre = genlaguerre(n - l - 1, 2 * l + 1)(rho)
    return norm * np.exp(-rho / 2) * rho**l * laguerre
    #returning to the initial function\value
#(2 / (n*a_0))**3 factor on bohr radius formula
#(n - l -1) and (n +1) are factorials
#laguerre is the polynomial function
def radial_probability(r, n, l):
    R_nl = radial_wavefunction(r, n, l)
    #returning to its previous one
    return 4 * np.pi * r**2 * np.abs(R_nl)**2
#Tk is the main window of GUI
root = Tk()
root.geometry('1000x1000')
#111 for one subplot
fig = Figure(figsize=(5, 4))
ax = fig.add_subplot(111, xlabel='Radial Distance (r)', ylabel='Probability Distribution (p)',
                     title='Radial probability distribution of atomic orbitals till 4s1')
#l =n-1
n_initial, l_initial = 1, 0
r = np.linspace(0, 10, 100)
line, = ax.plot(r, radial_probability(r, n_initial, l_initial), label=f'n={n_initial}, l={l_initial}')
ax.legend()
#putting function and initial values
#ax is object , legend is used for multiple elements
#putting the string values into work of initials
# changing values of strings to interger
n_value = IntVar(root, n_initial)
l_value = IntVar(root, l_initial)

def update_plot(*args):
    n = n_value.get()
    # Clearing the existing options in l dropdown by introducing the end function
    l_dropdown['menu'].delete(0, 'end')
    # Updating range of l with n and interconnecting them
    l_range = range(0, n)
    for l in l_range:
        if l <= n - 1:
            l_dropdown['menu'].add_command(label=str(l), command=lambda val=l: update_plot_l(val))
        # Checking if the current l value is valid based on the condition given in the equation
    l_value.set(min((l_range)))
    update_plot_l()
 # putting function inside a function itself and giving conditions

def update_plot_l(l=None):
    n = n_value.get()
    if l is None:
        l = l_value.get()
        #updating the y axis data and putting function
    line.set_ydata(radial_probability(r, n, l))
    line.set_label(f'n={n}, l={l}')
    ax.legend()
    fig.canvas.draw_idle()
    # Set the updated l_value in the dropdown
    l_value.set(l)
    #customizing the line style and its colour
line.set_linestyle('--')
line.set_color('blue')
#updating the label and optionmenu in it means updating the dropdown only
n_label = Label(root, text='principal quantum number n')
n_label.pack()
n_dropdown = OptionMenu(root, n_value, *range(1, 5), command=update_plot)
n_dropdown.pack()
#naming the label of n and putting the range including 0
#updating the label and optionmenu in it
#naming the label of l and putting the range including 0
#adding grid to look more good
l_label = Label(root, text='azimuthal quantum number l')
l_label.pack()
l_dropdown = OptionMenu(root, l_value, *range(0, 5), command=update_plot)
l_dropdown.pack()
ax.grid(True)
#to display the figure
canvas = FigureCanvasTkAgg(fig, master=root)
canvas.draw()
canvas.get_tk_widget().pack(side='top', fill='both', expand=True)
#calling the update plot to update everthing in figure
#used for button and loop also
update_plot()
root.mainloop()
#saving my graph photo
plt.savefig('my_figure.png')
